{
	"id": "20a60d633155ad41c783bb80443879a1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/DAOMembership.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Import necessary modules and libraries\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// DAO Membership Management Contract\ncontract DAOMembership {\n    struct DAOmember {\n        bool isRegistered;\n    }\n\n    mapping(address => DAOmember) internal daoMembers;\n\n    event ScientistRegistered(address indexed scientist);\n\n     modifier onlyRegisteredMember() {\n        require(daoMembers[msg.sender].isRegistered, \"You must be a registered DAO member\");\n        _;\n    }\n\n    function registerScientist() external {\n        require(!daoMembers[msg.sender].isRegistered, \"Already registered as a DAO member\");\n        daoMembers[msg.sender].isRegistered = true;\n        emit ScientistRegistered(msg.sender);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/DAOMembership.sol": {
				"DAOMembership": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "scientist",
									"type": "address"
								}
							],
							"name": "ScientistRegistered",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "registerScientist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/DAOMembership.sol\":195:784  contract DAOMembership {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/DAOMembership.sol\":195:784  contract DAOMembership {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x10bb5e05\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/DAOMembership.sol\":546:782  function registerScientist() external {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"contracts/DAOMembership.sol\":603:613  daoMembers */\n      0x00\n        /* \"contracts/DAOMembership.sol\":603:625  daoMembers[msg.sender] */\n      dup1\n        /* \"contracts/DAOMembership.sol\":614:624  msg.sender */\n      caller\n        /* \"contracts/DAOMembership.sol\":603:625  daoMembers[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/DAOMembership.sol\":603:638  daoMembers[msg.sender].isRegistered */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/DAOMembership.sol\":602:638  !daoMembers[msg.sender].isRegistered */\n      iszero\n        /* \"contracts/DAOMembership.sol\":594:677  require(!daoMembers[msg.sender].isRegistered, \"Already registered as a DAO member\") */\n      tag_7\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_8\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_7:\n        /* \"contracts/DAOMembership.sol\":725:729  true */\n      0x01\n        /* \"contracts/DAOMembership.sol\":687:697  daoMembers */\n      0x00\n        /* \"contracts/DAOMembership.sol\":687:709  daoMembers[msg.sender] */\n      dup1\n        /* \"contracts/DAOMembership.sol\":698:708  msg.sender */\n      caller\n        /* \"contracts/DAOMembership.sol\":687:709  daoMembers[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/DAOMembership.sol\":687:722  daoMembers[msg.sender].isRegistered */\n      0x00\n      add\n      0x00\n        /* \"contracts/DAOMembership.sol\":687:729  daoMembers[msg.sender].isRegistered = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/DAOMembership.sol\":764:774  msg.sender */\n      caller\n        /* \"contracts/DAOMembership.sol\":744:775  ScientistRegistered(msg.sender) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe57694be0e3c8f1dac61e75df3942362c6f7ccdcf9b69b623a6a86f0befd4d0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/DAOMembership.sol\":546:782  function registerScientist() external {... */\n      jump\t// out\n        /* \"#utility.yul\":7:176   */\n    tag_10:\n        /* \"#utility.yul\":91:102   */\n      0x00\n        /* \"#utility.yul\":125:131   */\n      dup3\n        /* \"#utility.yul\":120:123   */\n      dup3\n        /* \"#utility.yul\":113:132   */\n      mstore\n        /* \"#utility.yul\":165:169   */\n      0x20\n        /* \"#utility.yul\":160:163   */\n      dup3\n        /* \"#utility.yul\":156:170   */\n      add\n        /* \"#utility.yul\":141:170   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:176   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":182:403   */\n    tag_11:\n        /* \"#utility.yul\":322:356   */\n      0x416c7265616479207265676973746572656420617320612044414f206d656d62\n        /* \"#utility.yul\":318:319   */\n      0x00\n        /* \"#utility.yul\":310:316   */\n      dup3\n        /* \"#utility.yul\":306:320   */\n      add\n        /* \"#utility.yul\":299:357   */\n      mstore\n        /* \"#utility.yul\":391:395   */\n      0x6572000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":386:388   */\n      0x20\n        /* \"#utility.yul\":378:384   */\n      dup3\n        /* \"#utility.yul\":374:389   */\n      add\n        /* \"#utility.yul\":367:396   */\n      mstore\n        /* \"#utility.yul\":182:403   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":409:775   */\n    tag_12:\n        /* \"#utility.yul\":551:554   */\n      0x00\n        /* \"#utility.yul\":572:639   */\n      tag_17\n        /* \"#utility.yul\":636:638   */\n      0x22\n        /* \"#utility.yul\":631:634   */\n      dup4\n        /* \"#utility.yul\":572:639   */\n      tag_10\n      jump\t// in\n    tag_17:\n        /* \"#utility.yul\":565:639   */\n      swap2\n      pop\n        /* \"#utility.yul\":648:741   */\n      tag_18\n        /* \"#utility.yul\":737:740   */\n      dup3\n        /* \"#utility.yul\":648:741   */\n      tag_11\n      jump\t// in\n    tag_18:\n        /* \"#utility.yul\":766:768   */\n      0x40\n        /* \"#utility.yul\":761:764   */\n      dup3\n        /* \"#utility.yul\":757:769   */\n      add\n        /* \"#utility.yul\":750:769   */\n      swap1\n      pop\n        /* \"#utility.yul\":409:775   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":781:1200   */\n    tag_9:\n        /* \"#utility.yul\":947:951   */\n      0x00\n        /* \"#utility.yul\":985:987   */\n      0x20\n        /* \"#utility.yul\":974:983   */\n      dup3\n        /* \"#utility.yul\":970:988   */\n      add\n        /* \"#utility.yul\":962:988   */\n      swap1\n      pop\n        /* \"#utility.yul\":1034:1043   */\n      dup2\n        /* \"#utility.yul\":1028:1032   */\n      dup2\n        /* \"#utility.yul\":1024:1044   */\n      sub\n        /* \"#utility.yul\":1020:1021   */\n      0x00\n        /* \"#utility.yul\":1009:1018   */\n      dup4\n        /* \"#utility.yul\":1005:1022   */\n      add\n        /* \"#utility.yul\":998:1045   */\n      mstore\n        /* \"#utility.yul\":1062:1193   */\n      tag_20\n        /* \"#utility.yul\":1188:1192   */\n      dup2\n        /* \"#utility.yul\":1062:1193   */\n      tag_12\n      jump\t// in\n    tag_20:\n        /* \"#utility.yul\":1054:1193   */\n      swap1\n      pop\n        /* \"#utility.yul\":781:1200   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212208e29d962b33ab50347038493d0bb945a3b3d47606ec8f5ca0d5f670dccfb4aa264736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506102318061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806310bb5e051461002d575b5f80fd5b610035610037565b005b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff16156100c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b9906101dd565b60405180910390fd5b60015f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fe57694be0e3c8f1dac61e75df3942362c6f7ccdcf9b69b623a6a86f0befd4d0d60405160405180910390a2565b5f82825260208201905092915050565b7f416c7265616479207265676973746572656420617320612044414f206d656d625f8201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b5f6101c760228361015d565b91506101d28261016d565b604082019050919050565b5f6020820190508181035f8301526101f4816101bb565b905091905056fea26469706673582212208e29d962b33ab50347038493d0bb945a3b3d47606ec8f5ca0d5f670dccfb4aa264736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x231 DUP1 PUSH2 0x1D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x10BB5E05 EQ PUSH2 0x2D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x35 PUSH2 0x37 JUMP JUMPDEST STOP JUMPDEST PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9 SWAP1 PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE57694BE0E3C8F1DAC61E75DF3942362C6F7CCDCF9B69B623A6A86F0BEFD4D0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416C7265616479207265676973746572656420617320612044414F206D656D62 PUSH0 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1C7 PUSH1 0x22 DUP4 PUSH2 0x15D JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2 DUP3 PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1F4 DUP2 PUSH2 0x1BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x29 0xD9 PUSH3 0xB33AB5 SUB SELFBALANCE SUB DUP5 SWAP4 0xD0 0xBB SWAP5 GAS EXTCODESIZE RETURNDATASIZE SELFBALANCE PUSH1 0x6E 0xC8 CREATE2 0xCA 0xD PUSH0 PUSH8 0xDCCFB4AA264736F PUSH13 0x63430008140033000000000000 ",
							"sourceMap": "195:589:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@registerScientist_132": {
									"entryPoint": 55,
									"id": 132,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 443,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 477,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"store_literal_in_memory_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0": {
									"entryPoint": 365,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1203:2",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "103:73:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "120:3:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "125:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "113:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "113:19:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "113:19:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "141:29:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "160:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "165:4:2",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "156:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "156:14:2"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "141:11:2"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "75:3:2",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "80:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "91:11:2",
														"type": ""
													}
												],
												"src": "7:169:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "288:115:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "318:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "306:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "306:14:2"
																	},
																	{
																		"hexValue": "416c7265616479207265676973746572656420617320612044414f206d656d62",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "322:34:2",
																		"type": "",
																		"value": "Already registered as a DAO memb"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "299:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "299:58:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "299:58:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "378:6:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "386:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "374:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "374:15:2"
																	},
																	{
																		"hexValue": "6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "391:4:2",
																		"type": "",
																		"value": "er"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "367:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "367:29:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "367:29:2"
														}
													]
												},
												"name": "store_literal_in_memory_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "280:6:2",
														"type": ""
													}
												],
												"src": "182:221:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "555:220:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "565:74:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "631:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "636:2:2",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "572:58:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "572:67:2"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "565:3:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "737:3:2"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0",
																	"nodeType": "YulIdentifier",
																	"src": "648:88:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:93:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:93:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "750:19:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "761:3:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "766:2:2",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "757:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "757:12:2"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "750:3:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "543:3:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "551:3:2",
														"type": ""
													}
												],
												"src": "409:366:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "952:248:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "962:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "974:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "985:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "970:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "970:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "962:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1009:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1020:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1005:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1005:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1028:4:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1034:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1024:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1024:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "998:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "998:47:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "998:47:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1054:139:2",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1188:4:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1062:124:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1062:131:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1054:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "932:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "947:4:2",
														"type": ""
													}
												],
												"src": "781:419:2"
											}
										]
									},
									"contents": "{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0(memPtr) {\n\n        mstore(add(memPtr, 0), \"Already registered as a DAO memb\")\n\n        mstore(add(memPtr, 32), \"er\")\n\n    }\n\n    function abi_encode_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610029575f3560e01c806310bb5e051461002d575b5f80fd5b610035610037565b005b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff16156100c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b9906101dd565b60405180910390fd5b60015f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fe57694be0e3c8f1dac61e75df3942362c6f7ccdcf9b69b623a6a86f0befd4d0d60405160405180910390a2565b5f82825260208201905092915050565b7f416c7265616479207265676973746572656420617320612044414f206d656d625f8201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b5f6101c760228361015d565b91506101d28261016d565b604082019050919050565b5f6020820190508181035f8301526101f4816101bb565b905091905056fea26469706673582212208e29d962b33ab50347038493d0bb945a3b3d47606ec8f5ca0d5f670dccfb4aa264736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x10BB5E05 EQ PUSH2 0x2D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x35 PUSH2 0x37 JUMP JUMPDEST STOP JUMPDEST PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9 SWAP1 PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE57694BE0E3C8F1DAC61E75DF3942362C6F7CCDCF9B69B623A6A86F0BEFD4D0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416C7265616479207265676973746572656420617320612044414F206D656D62 PUSH0 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1C7 PUSH1 0x22 DUP4 PUSH2 0x15D JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2 DUP3 PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1F4 DUP2 PUSH2 0x1BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x29 0xD9 PUSH3 0xB33AB5 SUB SELFBALANCE SUB DUP5 SWAP4 0xD0 0xBB SWAP5 GAS EXTCODESIZE RETURNDATASIZE SELFBALANCE PUSH1 0x6E 0xC8 CREATE2 0xCA 0xD PUSH0 PUSH8 0xDCCFB4AA264736F PUSH13 0x63430008140033000000000000 ",
							"sourceMap": "195:589:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;546:236;;;:::i;:::-;;;603:10;:22;614:10;603:22;;;;;;;;;;;;;;;:35;;;;;;;;;;;;602:36;594:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;725:4;687:10;:22;698:10;687:22;;;;;;;;;;;;;;;:35;;;:42;;;;;;;;;;;;;;;;;;764:10;744:31;;;;;;;;;;;;546:236::o;7:169:2:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:221::-;322:34;318:1;310:6;306:14;299:58;391:4;386:2;378:6;374:15;367:29;182:221;:::o;409:366::-;551:3;572:67;636:2;631:3;572:67;:::i;:::-;565:74;;648:93;737:3;648:93;:::i;:::-;766:2;761:3;757:12;750:19;;409:366;;;:::o;781:419::-;947:4;985:2;974:9;970:18;962:26;;1034:9;1028:4;1024:20;1020:1;1009:9;1005:17;998:47;1062:131;1188:4;1062:131;:::i;:::-;1054:139;;781:419;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "112200",
								"executionCost": "157",
								"totalCost": "112357"
							},
							"external": {
								"registerScientist()": "27886"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 195,
									"end": 784,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 784,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208e29d962b33ab50347038493d0bb945a3b3d47606ec8f5ca0d5f670dccfb4aa264736f6c63430008140033",
									".code": [
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "10BB5E05"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 784,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 195,
											"end": 784,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 546,
											"end": 782,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 546,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 546,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 546,
											"end": 782,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 546,
											"end": 782,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 603,
											"end": 613,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 614,
											"end": 624,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 603,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 603,
											"end": 625,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 603,
											"end": 638,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 603,
											"end": 638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 603,
											"end": 638,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 603,
											"end": 638,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 603,
											"end": 638,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 602,
											"end": 638,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 594,
											"end": 677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 594,
											"end": 677,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 594,
											"end": 677,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 725,
											"end": 729,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 687,
											"end": 697,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 698,
											"end": 708,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 687,
											"end": 709,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 709,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 687,
											"end": 722,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 722,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 687,
											"end": 722,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 729,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 687,
											"end": 729,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 687,
											"end": 729,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 687,
											"end": 729,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 764,
											"end": 774,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 744,
											"end": 775,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "PUSH",
											"source": 1,
											"value": "E57694BE0E3C8F1DAC61E75DF3942362C6F7CCDCF9B69B623A6A86F0BEFD4D0D"
										},
										{
											"begin": 744,
											"end": 775,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 775,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 775,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 775,
											"name": "LOG2",
											"source": 1
										},
										{
											"begin": 546,
											"end": 782,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 176,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 7,
											"end": 176,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 91,
											"end": 102,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 131,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 120,
											"end": 123,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 113,
											"end": 132,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 165,
											"end": 169,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 160,
											"end": 163,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 156,
											"end": 170,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 141,
											"end": 170,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 141,
											"end": 170,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 176,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7,
											"end": 176,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7,
											"end": 176,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 176,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 176,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 182,
											"end": 403,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 182,
											"end": 403,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 322,
											"end": 356,
											"name": "PUSH",
											"source": 2,
											"value": "416C7265616479207265676973746572656420617320612044414F206D656D62"
										},
										{
											"begin": 318,
											"end": 319,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 310,
											"end": 316,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 306,
											"end": 320,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 299,
											"end": 357,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 391,
											"end": 395,
											"name": "PUSH",
											"source": 2,
											"value": "6572000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 386,
											"end": 388,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 378,
											"end": 384,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 374,
											"end": 389,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 367,
											"end": 396,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 182,
											"end": 403,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 182,
											"end": 403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 409,
											"end": 775,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 409,
											"end": 775,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 551,
											"end": 554,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 636,
											"end": 638,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 631,
											"end": 634,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 572,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 572,
											"end": 639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 572,
											"end": 639,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 572,
											"end": 639,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 565,
											"end": 639,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 565,
											"end": 639,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 648,
											"end": 741,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 737,
											"end": 740,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 648,
											"end": 741,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 648,
											"end": 741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 648,
											"end": 741,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 648,
											"end": 741,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 766,
											"end": 768,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 761,
											"end": 764,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 757,
											"end": 769,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 750,
											"end": 769,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 750,
											"end": 769,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 409,
											"end": 775,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 409,
											"end": 775,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 409,
											"end": 775,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 409,
											"end": 775,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 781,
											"end": 1200,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 781,
											"end": 1200,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 947,
											"end": 951,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 985,
											"end": 987,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 983,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 970,
											"end": 988,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 962,
											"end": 988,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 962,
											"end": 988,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1034,
											"end": 1043,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1032,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1024,
											"end": 1044,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1020,
											"end": 1021,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1009,
											"end": 1018,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1022,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 998,
											"end": 1045,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1062,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1188,
											"end": 1192,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1062,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1062,
											"end": 1193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1062,
											"end": 1193,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1054,
											"end": 1193,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1054,
											"end": 1193,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 781,
											"end": 1200,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 781,
											"end": 1200,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 781,
											"end": 1200,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 781,
											"end": 1200,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"contracts/DAOMembership.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"registerScientist()": "10bb5e05"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scientist\",\"type\":\"address\"}],\"name\":\"ScientistRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"registerScientist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAOMembership.sol\":\"DAOMembership\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"contracts/DAOMembership.sol\":{\"keccak256\":\"0xf57f36df3e10ea81ba5f39617bfc9f9f769e10970661deaee9ca21aee2f20619\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d77792d5dbecca0dfd4fbe6b9bf4da292d1a75cadfb9f86f33d289e5b477a94\",\"dweb:/ipfs/QmaHwrHDh1mBK9zn4WLcyuN6FaxvxyF8V4szryjgghsqLN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 88,
								"contract": "contracts/DAOMembership.sol:DAOMembership",
								"label": "daoMembers",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_struct(DAOmember)83_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(DAOmember)83_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct DAOMembership.DAOmember)",
								"numberOfBytes": "32",
								"value": "t_struct(DAOmember)83_storage"
							},
							"t_struct(DAOmember)83_storage": {
								"encoding": "inplace",
								"label": "struct DAOMembership.DAOmember",
								"members": [
									{
										"astId": 82,
										"contract": "contracts/DAOMembership.sol:DAOMembership",
										"label": "isRegistered",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "213:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "395:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "404:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "426:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "446:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:0"
									},
									"src": "389:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "626:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "635:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "658:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "683:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:0"
									},
									"src": "620:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:0",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:0",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "930:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "970:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:0"
									},
									"scope": 77,
									"src": "911:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1221:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1233:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1266:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:0"
									},
									"scope": 77,
									"src": "1203:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1566:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1581:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1621:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:0"
									},
									"scope": 77,
									"src": "1547:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2325:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2375:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:0"
									},
									"scope": 77,
									"src": "2308:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2711:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2725:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2737:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2770:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:0"
									},
									"scope": 77,
									"src": "2689:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "203:2575:0",
							"usedErrors": [],
							"usedEvents": [
								11,
								20
							]
						}
					],
					"src": "106:2673:0"
				},
				"id": 0
			},
			"contracts/DAOMembership.sol": {
				"ast": {
					"absolutePath": "contracts/DAOMembership.sol",
					"exportedSymbols": {
						"DAOMembership": [
							133
						],
						"IERC20": [
							77
						]
					},
					"id": 134,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 80,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 134,
							"sourceUnit": 78,
							"src": "99:56:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DAOMembership",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 133,
							"linearizedBaseContracts": [
								133
							],
							"name": "DAOMembership",
							"nameLocation": "204:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "DAOMembership.DAOmember",
									"id": 83,
									"members": [
										{
											"constant": false,
											"id": 82,
											"mutability": "mutable",
											"name": "isRegistered",
											"nameLocation": "256:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 83,
											"src": "251:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 81,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "251:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DAOmember",
									"nameLocation": "231:9:1",
									"nodeType": "StructDefinition",
									"scope": 133,
									"src": "224:51:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 88,
									"mutability": "mutable",
									"name": "daoMembers",
									"nameLocation": "320:10:1",
									"nodeType": "VariableDeclaration",
									"scope": 133,
									"src": "281:49:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_DAOmember_$83_storage_$",
										"typeString": "mapping(address => struct DAOMembership.DAOmember)"
									},
									"typeName": {
										"id": 87,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 84,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "289:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "281:29:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_DAOmember_$83_storage_$",
											"typeString": "mapping(address => struct DAOMembership.DAOmember)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 86,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 85,
												"name": "DAOmember",
												"nameLocations": [
													"300:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 83,
												"src": "300:9:1"
											},
											"referencedDeclaration": 83,
											"src": "300:9:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_DAOmember_$83_storage_ptr",
												"typeString": "struct DAOMembership.DAOmember"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "e57694be0e3c8f1dac61e75df3942362c6f7ccdcf9b69b623a6a86f0befd4d0d",
									"id": 92,
									"name": "ScientistRegistered",
									"nameLocation": "343:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"indexed": true,
												"mutability": "mutable",
												"name": "scientist",
												"nameLocation": "379:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "363:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 89,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "363:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:27:1"
									},
									"src": "337:53:1"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "429:111:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 95,
																	"name": "daoMembers",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 88,
																	"src": "447:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_DAOmember_$83_storage_$",
																		"typeString": "mapping(address => struct DAOMembership.DAOmember storage ref)"
																	}
																},
																"id": 98,
																"indexExpression": {
																	"expression": {
																		"id": 96,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "458:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 97,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "462:6:1",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "458:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "447:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DAOmember_$83_storage",
																	"typeString": "struct DAOMembership.DAOmember storage ref"
																}
															},
															"id": 99,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "470:12:1",
															"memberName": "isRegistered",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 82,
															"src": "447:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f75206d757374206265206120726567697374657265642044414f206d656d626572",
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "484:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_395d446735dab333035d3587cf3454a383ed02b3fab7f1003653f8915a8c4f90",
																"typeString": "literal_string \"You must be a registered DAO member\""
															},
															"value": "You must be a registered DAO member"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_395d446735dab333035d3587cf3454a383ed02b3fab7f1003653f8915a8c4f90",
																"typeString": "literal_string \"You must be a registered DAO member\""
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "439:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "439:83:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "ExpressionStatement",
												"src": "439:83:1"
											},
											{
												"id": 103,
												"nodeType": "PlaceholderStatement",
												"src": "532:1:1"
											}
										]
									},
									"id": 105,
									"name": "onlyRegisteredMember",
									"nameLocation": "406:20:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "426:2:1"
									},
									"src": "397:143:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 131,
										"nodeType": "Block",
										"src": "584:198:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "602:36:1",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 109,
																		"name": "daoMembers",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 88,
																		"src": "603:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_DAOmember_$83_storage_$",
																			"typeString": "mapping(address => struct DAOMembership.DAOmember storage ref)"
																		}
																	},
																	"id": 112,
																	"indexExpression": {
																		"expression": {
																			"id": 110,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "614:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "618:6:1",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "614:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "603:22:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_DAOmember_$83_storage",
																		"typeString": "struct DAOMembership.DAOmember storage ref"
																	}
																},
																"id": 113,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "626:12:1",
																"memberName": "isRegistered",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 82,
																"src": "603:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c7265616479207265676973746572656420617320612044414f206d656d626572",
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "640:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0",
																"typeString": "literal_string \"Already registered as a DAO member\""
															},
															"value": "Already registered as a DAO member"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_de32ca38a30cb88ff1c1527c7532aa9e422081fb6a365be71f5edec6e77a6dd0",
																"typeString": "literal_string \"Already registered as a DAO member\""
															}
														],
														"id": 108,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "594:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "594:83:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 117,
												"nodeType": "ExpressionStatement",
												"src": "594:83:1"
											},
											{
												"expression": {
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 118,
																"name": "daoMembers",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "687:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_DAOmember_$83_storage_$",
																	"typeString": "mapping(address => struct DAOMembership.DAOmember storage ref)"
																}
															},
															"id": 121,
															"indexExpression": {
																"expression": {
																	"id": 119,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "698:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "702:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "698:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "687:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_DAOmember_$83_storage",
																"typeString": "struct DAOMembership.DAOmember storage ref"
															}
														},
														"id": 122,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "710:12:1",
														"memberName": "isRegistered",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 82,
														"src": "687:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 123,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "725:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "687:42:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 125,
												"nodeType": "ExpressionStatement",
												"src": "687:42:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 127,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "764:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "768:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "764:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 126,
														"name": "ScientistRegistered",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 92,
														"src": "744:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "744:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 130,
												"nodeType": "EmitStatement",
												"src": "739:36:1"
											}
										]
									},
									"functionSelector": "10bb5e05",
									"id": 132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "registerScientist",
									"nameLocation": "555:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "572:2:1"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:1"
									},
									"scope": 133,
									"src": "546:236:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 134,
							"src": "195:589:1",
							"usedErrors": [],
							"usedEvents": [
								92
							]
						}
					],
					"src": "32:753:1"
				},
				"id": 1
			}
		}
	}
}